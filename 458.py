# 本质上是一个数字进制表示的问题.
# 一头猪负责一个进制位数。
# 先来考虑一种最简单的情况，buckets = 1000, minutesToDie = 15, minutesToTest = 15。
# 此时每只小猪都只能喝1次液体（再喝时间就不够了），每个小猪喝完若干瓶液体后只能出现两种状态，要么死亡，要么存活.
# 有两种状态，就是二进制问题。
# 我们给这 1000 瓶液体分别标上一个唯一编号 0-999，由于 2 ^ 10 > 1000 > 2 ^ 9
# 所以每瓶液体都对应着唯一的一个长度为10的二进制串. 我们只需要10只小猪，让每个小猪负责一个二进制位即可.
# 例如第一只小猪负责二进制串的最低位，那么它就需要喝掉所有二进制最低位为1的液体，如果这只小猪最后死亡，说明有毒液体的编号二进制最低位为1；
# 否则小猪存活，有毒液体的编号二进制最低位为0. 这样一来，一只小猪就可以确定一个二进制位的取值，使用10只小猪就能完全确定有毒液体的编号.
#
# 来考虑更一般的情况，buckets = 1000, minutesToDie = 15, minutesToTest = 60，此时每只小猪可以喝4次液体，在时间限制范围内，小猪可能出现的状态共有5种，分别为：喝完第1次后死亡、喝完第2次后死亡、喝完第3次后死亡、喝完第4次后死亡、喝完4次后依然存活. 现在每只小猪可以5种状态了，而不是之前的2种，那么我们就可以将瓶子的编号转换成五进制数考虑.
#
# 我们依然给这 1000 瓶液体分别标上一个唯一编号 0-999，由于 5 ^ 5 > 1000 > 5 ^ 4
# 所以每瓶液体都对应着唯一的一个长度为5的五进制串. 我们只需要5只小猪，让每个小猪负责一个五进制位即可.
# 例如第一只小猪负责五进制串的最低位，那么它第一次先喝掉五进制最低位为1的液体（在0-15分钟当中把最低位位1的液体都喝一遍，一次喝完全部）
# 第二次先喝掉五进制最低位为2的液体，（在15-30分钟当中把最低位位1的液体都喝一遍，一次喝完全部）
# 第三次先喝掉五进制最低位为3的液体，（在30-45分钟当中把最低位位1的液体都喝一遍，一次喝完全部）
# 第四次先喝掉五进制最低位为4的液体. （在45-60分钟当中把最低位位1的液体都喝一遍，一次喝完全部）
# 在这一过程中，如果这只小猪某次喝完后死亡，
# 就可以立马确定有毒液体五进制的这一位（最低位）的取值，如果喝完四次后仍存活，说明有毒液体五进制的最低位为0.
# 这样一来，一只小猪就可以确定一个五进制位的取值，使用5只小猪就能完全确定有毒液体的编号.



import math
class Solution:
    def poorPigs(self, buckets: int, minutesToDie: int, minutesToTest: int) -> int:
        stage_per_pig = (minutesToTest // minutesToDie) + 1

        # 要通过换底公式: stage ** n > bucker > stage ** (n - 1)
        # stage ** n == bucket
        # n = log stage(底) bucket
        # 换成以e为底数
        # n = (log e(底) buckets) / (log e(底) stage_per_pig)

        return math.ceil(math.log(buckets) / math.log(stage_per_pig))
